using TypeSharp;
using Xunit;

namespace Ajax.Tests
{
    public class TypeSharpTests
    {
        [Fact]
        public void TypeSharpTest()
        {
            var typeSharpVersion = typeof(TypeScriptModelBuilder).Assembly.GetName().Version;
            var builder = new TypeScriptModelBuilder();
            builder.CacheType<JSend>();
            builder.CacheType<JSuccess>();
            builder.CacheType<JFail>();
            builder.CacheType<JError>();
            builder.AddDeclaredType(typeof(JSuccess<>), "JSuccess<any>");
            builder.AddDeclaredType(typeof(JFail<>), "JFail<any>");
            builder.AddDeclaredType(typeof(JError<>), "JError<any>");

            var code = builder.Compile();
            Assert.Equal($@"/* Generated by TypeSharp v{typeSharpVersion} */" +
@"

declare namespace Ajax {
    interface JSend {
        status?: string;
        data?: any;
    }
    interface JSuccess {
        data?: any;
        status?: string;
    }
    interface JFail {
        data?: any;
        status?: string;
    }
    interface JError {
        data?: any;
        status?: string;
        code?: string;
        message?: string;
    }
}

namespace Ajax {
    export namespace JSend {
        export const SUCCESS_STATUS: string = 'success';
        export const FAIL_STATUS: string = 'fail';
        export const ERROR_STATUS: string = 'error';
    }
}
", code);
        }

    }
}
